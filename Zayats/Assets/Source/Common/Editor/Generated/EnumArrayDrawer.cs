// <auto-generated>
// This file has been autogenerated by Kari.
// </auto-generated>

#pragma warning disable


namespace Kari.Plugins.AdvancedEnum.Editor
{
    using UnityEngine;
    using UnityEditor;
    using System;

    public abstract class EnumArrayDrawer : PropertyDrawer
    {
        protected static float LabelHeight => EditorGUIUtility.singleLineHeight + EditorGUIUtility.standardVerticalSpacing;
        protected abstract string[] Names { get; }

        public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
        {
            var array = property.FindPropertyRelative("Values");
            position.height = LabelHeight;
            bool isExpanded = EditorGUI.Foldout(position, property.isExpanded, label);

            if (isExpanded)
            {
                EditorGUI.indentLevel++;
                position.y += LabelHeight;
                DrawArrayWrapperElements(array, Names, ref position);
                EditorGUI.indentLevel--;
            }

            property.isExpanded = isExpanded;
        }

        public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
        {
            var labelSize = LabelHeight;
            if (!property.isExpanded)
                return labelSize;

            var array = property.FindPropertyRelative("Values");
            return labelSize + GetArrayWrapperElementsHeight(array, Names);
        }

        public static float GetArrayWrapperElementsHeight(SerializedProperty property, ReadOnlySpan<string> elementNames)
        {
            property.arraySize = elementNames.Length;

            float result = 0;
            for (int i = 0; i < elementNames.Length; i++)
            {
                var arrayElement = property.GetArrayElementAtIndex(i);
                var height = EditorGUI.GetPropertyHeight(arrayElement, includeChildren: true);
                result += height + EditorGUIUtility.standardVerticalSpacing;
            }

            return result;
        }

        public static void DrawArrayWrapperElements(SerializedProperty property, ReadOnlySpan<string> elementNames, ref Rect rect)
        {
            var content = new GUIContent();
            property.arraySize = elementNames.Length;

            for (int i = 0; i < elementNames.Length; i++)
            {
                string name = elementNames[i];
                content.text = name;
                var arrayElement = property.GetArrayElementAtIndex(i);
                var height = EditorGUI.GetPropertyHeight(arrayElement, includeChildren: true);
                var actualHeight = height + EditorGUIUtility.standardVerticalSpacing;
                rect.height = actualHeight;
                EditorGUI.PropertyField(rect, arrayElement, content);
                rect.y += actualHeight;
            }
        }
    }
}

#pragma warning restore
