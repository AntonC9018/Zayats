// <auto-generated>
// This file has been autogenerated by Kari.
// </auto-generated>

#pragma warning disable

namespace Zayats.Core.Generated
{
    using System.Runtime.CompilerServices;
    public static class LockFlagsFlagsExtensions
    {
        /// <summary>
        /// Checks whether the given flags intersect with the other flags.
        /// Returns true if either of the other flags are set on the flags.
        /// To see if flags contain all of some other flags, use <c>Has()</c> instead. 
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool HasEither(this Zayats.Core.LockFlags flag1, Zayats.Core.LockFlags flag2)
        {
            return (flag1 & flag2) != 0;
        }

        /// <summary>
        /// Checks whether the given flags does not intersect with the other flags.
        /// Returns false if either of the other flags are set on the flags.
        /// This function does the same as negating a call to <c>HasEither()</c>.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool DoesNotHaveEither(this Zayats.Core.LockFlags flag1, Zayats.Core.LockFlags flag2)
        {
            return (flag1 & flag2) == 0;
        }

        /// <summary>
        /// Checks whether the given flags1 contains flags2.
        /// Returns false if either of the other flags are set on the flags.
        /// This function does the same as negating a call to <c>HasEither()</c>.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Has(this Zayats.Core.LockFlags flag1, Zayats.Core.LockFlags flag2)
        {
            return (flag1 & flag2) == flag2;
        }

        /// <summary>
        /// Checks whether the given flags1 does not contain flags2.
        /// Returns false if either of the other flags are set on the flags.
        /// This function does the same as negating a call to <c>!Has()</c>.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool DoesNotHave(this Zayats.Core.LockFlags flag1, Zayats.Core.LockFlags flag2)
        {
            return (flag1 & flag2) != flag2;
        }

        /// <summary>
        /// Modifies the given <c>LockFlags</c>, setting the given flags.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Zayats.Core.LockFlags Set(ref this Zayats.Core.LockFlags flagInitial, Zayats.Core.LockFlags flagToSet)
        {
            flagInitial = flagInitial | flagToSet;
            return ref flagInitial;
        }

        /// <summary>
        /// Returns a new <c>LockFlags</c> with the given flags set.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Zayats.Core.LockFlags WithSet(this Zayats.Core.LockFlags flagInitial, Zayats.Core.LockFlags flagToSet)
        {
            return flagInitial | flagToSet;
        }
        
        /// <summary>
        /// Modifies the given <c>LockFlags</c> unsetting the given flags.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Zayats.Core.LockFlags Unset(ref this Zayats.Core.LockFlags flagInitial, Zayats.Core.LockFlags flagToSet)
        {
            flagInitial = flagInitial & (~flagToSet);
            return ref flagInitial;
        }

        /// <summary>
        /// Returns a new <c>LockFlags</c> with the given flags unset.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Zayats.Core.LockFlags WithUnset(this Zayats.Core.LockFlags flagInitial, Zayats.Core.LockFlags flagToSet)
        {
            return flagInitial & (~flagToSet);
        }
        
        /// <summary>
        /// Modifies the given <c>LockFlags</c> with the given flags set or unset, 
        /// indicated by the <c>set</c> boolean parameter.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Zayats.Core.LockFlags Set(ref this Zayats.Core.LockFlags flagInitial, Zayats.Core.LockFlags flagToSet, bool set)
        {
            if (set) flagInitial = flagInitial | flagToSet;
            else     flagInitial = flagInitial & (~flagToSet);
            return ref flagInitial;
        }

        /// <summary>
        /// Returns a new <c>LockFlags</c> with the given flags set or unset, 
        /// indicated by the <c>set</c> boolean parameter.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Zayats.Core.LockFlags WithSet(this Zayats.Core.LockFlags flagInitial, Zayats.Core.LockFlags flagToSet, bool set)
        {
            if (set) return flagInitial | flagToSet;
            else     return flagInitial & (~flagToSet);
        }
    }
    
    public static class ThingFlagsFlagsExtensions
    {
        /// <summary>
        /// Checks whether the given flags intersect with the other flags.
        /// Returns true if either of the other flags are set on the flags.
        /// To see if flags contain all of some other flags, use <c>Has()</c> instead. 
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool HasEither(this Zayats.Core.ThingFlags flag1, Zayats.Core.ThingFlags flag2)
        {
            return (flag1 & flag2) != 0;
        }

        /// <summary>
        /// Checks whether the given flags does not intersect with the other flags.
        /// Returns false if either of the other flags are set on the flags.
        /// This function does the same as negating a call to <c>HasEither()</c>.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool DoesNotHaveEither(this Zayats.Core.ThingFlags flag1, Zayats.Core.ThingFlags flag2)
        {
            return (flag1 & flag2) == 0;
        }

        /// <summary>
        /// Checks whether the given flags1 contains flags2.
        /// Returns false if either of the other flags are set on the flags.
        /// This function does the same as negating a call to <c>HasEither()</c>.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Has(this Zayats.Core.ThingFlags flag1, Zayats.Core.ThingFlags flag2)
        {
            return (flag1 & flag2) == flag2;
        }

        /// <summary>
        /// Checks whether the given flags1 does not contain flags2.
        /// Returns false if either of the other flags are set on the flags.
        /// This function does the same as negating a call to <c>!Has()</c>.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool DoesNotHave(this Zayats.Core.ThingFlags flag1, Zayats.Core.ThingFlags flag2)
        {
            return (flag1 & flag2) != flag2;
        }

        /// <summary>
        /// Modifies the given <c>ThingFlags</c>, setting the given flags.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Zayats.Core.ThingFlags Set(ref this Zayats.Core.ThingFlags flagInitial, Zayats.Core.ThingFlags flagToSet)
        {
            flagInitial = flagInitial | flagToSet;
            return ref flagInitial;
        }

        /// <summary>
        /// Returns a new <c>ThingFlags</c> with the given flags set.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Zayats.Core.ThingFlags WithSet(this Zayats.Core.ThingFlags flagInitial, Zayats.Core.ThingFlags flagToSet)
        {
            return flagInitial | flagToSet;
        }
        
        /// <summary>
        /// Modifies the given <c>ThingFlags</c> unsetting the given flags.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Zayats.Core.ThingFlags Unset(ref this Zayats.Core.ThingFlags flagInitial, Zayats.Core.ThingFlags flagToSet)
        {
            flagInitial = flagInitial & (~flagToSet);
            return ref flagInitial;
        }

        /// <summary>
        /// Returns a new <c>ThingFlags</c> with the given flags unset.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Zayats.Core.ThingFlags WithUnset(this Zayats.Core.ThingFlags flagInitial, Zayats.Core.ThingFlags flagToSet)
        {
            return flagInitial & (~flagToSet);
        }
        
        /// <summary>
        /// Modifies the given <c>ThingFlags</c> with the given flags set or unset, 
        /// indicated by the <c>set</c> boolean parameter.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref Zayats.Core.ThingFlags Set(ref this Zayats.Core.ThingFlags flagInitial, Zayats.Core.ThingFlags flagToSet, bool set)
        {
            if (set) flagInitial = flagInitial | flagToSet;
            else     flagInitial = flagInitial & (~flagToSet);
            return ref flagInitial;
        }

        /// <summary>
        /// Returns a new <c>ThingFlags</c> with the given flags set or unset, 
        /// indicated by the <c>set</c> boolean parameter.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Zayats.Core.ThingFlags WithSet(this Zayats.Core.ThingFlags flagInitial, Zayats.Core.ThingFlags flagToSet, bool set)
        {
            if (set) return flagInitial | flagToSet;
            else     return flagInitial & (~flagToSet);
        }
    }
    
}

#pragma warning restore
